#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const PROJECT_ROOT = path.resolve(__dirname, '..');
const TRANSLATIONS_DIR = path.join(PROJECT_ROOT, 'lib', 'translations');
const IOS_SUPPORTING_DIR = path.join(PROJECT_ROOT, 'ios', 'KonKon', 'Supporting');

const LOCALE_MAP = {
  'en': 'en.lproj',
  'ja': 'ja.lproj',
  'zh-CN': 'zh-CN.lproj',
  'zh-TW': 'zh-TW.lproj',
};

const PERMISSION_KEYS = [
  'NSCameraUsageDescription',
  'NSPhotoLibraryUsageDescription',
  'NSPhotoLibraryAddUsageDescription',
  'NSMicrophoneUsageDescription',
  'NSLocationWhenInUseUsageDescription',
  'NSCalendarsUsageDescription',
  'NSRemindersUsageDescription',
  'NSUserTrackingUsageDescription',
];

function readJson(filePath) {
  return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath, { recursive: true });
}

function toStringsFileContent(map) {
  const header = '/* Generated by scripts/generate-infoplist-strings.js */\n';
  const lines = Object.entries(map)
    .map(([k, v]) => `"${k}" = "${String(v).replace(/"/g, '\\"')}";`)
    .join('\n');
  return `${header}\n${lines}\n`;
}

function main() {
  const locales = Object.keys(LOCALE_MAP);
  locales.forEach((locale) => {
    const jsonPath = path.join(TRANSLATIONS_DIR, `${locale}.json`);
    if (!fs.existsSync(jsonPath)) {
      console.warn(`[warn] Missing translation file for ${locale}: ${jsonPath}`);
      return;
    }

    const dict = readJson(jsonPath);

    // 部分專案將權限鍵放在頂層，因此直接從根取值
    const output = {};
    PERMISSION_KEYS.forEach((key) => {
      if (dict[key]) output[key] = dict[key];
    });

    // 保底：若有缺失，用英文回退
    if (locale !== 'en') {
      const enDict = readJson(path.join(TRANSLATIONS_DIR, 'en.json'));
      PERMISSION_KEYS.forEach((key) => {
        if (!output[key] && enDict[key]) output[key] = enDict[key];
      });
    }

    const lproj = LOCALE_MAP[locale];
    const outDir = path.join(IOS_SUPPORTING_DIR, lproj);
    ensureDir(outDir);
    const outFile = path.join(outDir, 'InfoPlist.strings');

    fs.writeFileSync(outFile, toStringsFileContent(output), 'utf8');
    console.log(`✅ Wrote ${outFile}`);
  });
}

main(); 